{
	"info": {
		"_postman_id": "c74eab65-e17b-4b2c-9144-d1f7c04e497c",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "961bc513-89db-4e1c-be2d-6cb726e27f99",
								"exec": [
									"pm.environment.set( \"email\", \"example@test.com\");",
									"pm.environment.set( \"password\", \"example\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8a8901b-8e62-4740-98aa-8d313deeb6c1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user = pm.response.json();",
									"pm.test(\"Verify that user is created with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user without email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aac30af8-d1fc-46cb-b5ae-fd13c98e2c9e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5fa8444f-443c-4163-8279-b636bc46927b",
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user without password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db55af71-7780-44e8-a0e7-6e3a5ccc6e8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5e1c1b8-f82e-41d3-91c8-d03cebb2fdea",
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"email\": \"{{email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with first name and last name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b358382-7460-4e53-b52a-81b748704206",
								"exec": [
									"pm.variables.set( \"email\", \"testemail@test.com\");",
									"pm.variables.set(\"password\", \"testpassword\");",
									"pm.environment.set( \"first_name\", \"test_first_name\");",
									"pm.environment.set( \"last_name\", \"test_last_name\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc3180a7-34dc-40b3-a3f8-e84e3bfdfc98",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user = pm.response.json();",
									"pm.test(\"Verify that user is created with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct last name\", function() {",
									"    pm.expect(user.last_name).to.equal(pm.variables.get(\"last_name\"));",
									"});",
									"pm.environment.set(\"user\", user);",
									"pm.environment.set(\"user_id\", user._id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0ac2948-581f-4ada-afff-c9affd3418ea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8beff691-3077-48cc-85a1-4925499ab5af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Verify that user is loged in\", function() {",
									"    pm.expect(pm.variables.get(\"email\")).to.equal(user.email);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "085cd196-3b2a-471c-92e7-7ca479a032d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac131c39-b00b-4e58-8043-06fbd0084121",
								"exec": [
									"pm.test(\"User is not loged in without password\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "502bbb23-fdbf-40ca-8301-d6a72ffee243",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2c12bd65-2275-44d0-a984-650a59132259",
								"exec": [
									"pm.test(\"User is not loged in without password\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e64f6a63-62c6-4469-9698-5215b5470f8d",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									"pm.variables.set(\"email\", \"newemail@email.com\");",
									"pm.variables.set(\"first_name\",\"new_first_name\");",
									"pm.variables.set(\"last_name\", \"new_last_name\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7ed96a9-c479-484e-bcad-fe97a06bd21c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Verify that user is updated with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is updated with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.test(\"Verify that user is updated with correct last name\", function() {",
									"    pm.expect(user.last_name).to.equal(pm.variables.get(\"last_name\"));",
									"});",
									"",
									"pm.variables.set(\"user\", user);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"favourite_places\": [],\r\n    \"trips\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user With partial dataset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "224422de-258c-4a92-9f97-4c4b4f6dcee8",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									"pm.variables.set(\"email\", \"newemail@email.com\");",
									"pm.variables.set(\"first_name\",\"new_first_name\");",
									"pm.variables.set(\"last_name\", \"new_last_name\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2105d5af-2d03-4bba-9506-ed9a07816deb",
								"exec": [
									"pm.test(\"User is not updated\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"favourite_places\": [],\r\n    \"trips\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update only email and first name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04334d4c-1740-4418-9c57-8ad17614750f",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									"pm.variables.set(\"email\", \"newsecondemail@email.com\");",
									"pm.variables.set(\"first_name\",\"new_second_first_name\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "81ef12ff-16c7-4013-b910-d8059290f8a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Verify that user is updated with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is updated with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.variables.set(\"user\", user);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f46d1e38-8fa6-4725-93eb-0ff18516c18e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7f7d136f-6346-4521-aa37-f23962c5c6d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate that user dataset is not empty\", function (){",
									"    pm.expect(pm.response.json().users).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user that doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b0dc842a-571a-4ee0-b708-ca2ae1b705fa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48abda6c-c54d-4148-bd7c-8761881fc056",
								"exec": [
									"pm.test(\"No users are returned\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/43124",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"43124"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a spesific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0541bd86-b8f9-47ea-8504-d37fee8dd4f3",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74b4bf10-a973-47a6-891e-0b5b4ff6d9e8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Compare expected email to testUser name\", function (){",
									"    pm.expect(pm.variables.get(\"user\").email).to.equal(user.email);",
									"});",
									"pm.test(\"Compare expected user id to testUser id\", function (){",
									"    pm.expect(pm.variables.get(\"user\").id).to.equal(user.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a test trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee55c15e-6455-4f2f-9ac6-ba5f7e51d054",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip\", pm.response.json());\r",
									"\r",
									"\r",
									"var tripName = \"Sandras Trip\";\r",
									"var testTrip = pm.variables.get(\"testTrip\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip.name).to.equal(tripName);\r",
									"});\r",
									"pm.environment.set(\"trip_id\", pm.variables.get(\"testTrip\")._id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ed7f1cf-243b-4653-8d77-786174347b67",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Sandras Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"{{user_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "838c145f-c5f5-4071-8c2a-dc4b7f25228f",
								"exec": [
									"pm.test(\"Successful Added Trip request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var user = pm.response.json();\r",
									"pm.test(\"Validate that a trip is added to the trip list\", function(){\r",
									"    pm.expect(user.trips).to.contain(pm.variables.get(\"trip_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da01876d-b124-4308-8905-ce1591d1c4b2",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n     \"trip\": \"{{trip_id}}\"\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a trip that already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dad64f75-5b5e-4040-a074-13888658f3a7",
								"exec": [
									"pm.test(\"Fail to Add Trip that exists\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf61c2ed-6592-4e9f-b662-21209a8c4e0b",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n     \"trip\": \"{{trip_id}}\"\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a trip by id'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13bc1d67-32ed-4fb1-85ca-59006222e30b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0148f359-ad52-4b05-b256-9117f18a47be",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var user = pm.response.json();\r",
									"pm.test(\"Compare expected id to testTrip id\", function (){\r",
									"    pm.expect(user.trips).to.not.contain(pm.variables.get(\"trip_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips/{{trip_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips",
								"{{trip_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a trip Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b50c92b7-8979-48b7-b012-30d15cf9b879",
								"exec": [
									"pm.test(\"Successful Added Trip request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var user = pm.response.json();\r",
									"pm.test(\"Validate that a trip is added to the trip list\", function(){\r",
									"    pm.expect(user.trips).to.contain(pm.variables.get(\"trip_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dd8b2ba-c7c7-41de-901f-22d7d7f1fa19",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n     \"trip\": \"{{trip_id}}\"\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all trips",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a5c96be0-9491-4100-9f4c-fdaffffbef94",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc5f4b46-223d-44ef-b29f-6294e3d61489",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trips = pm.response.json();\r",
									"pm.test(\"Validate that trips is empty\", function (){\r",
									"    pm.expect(trips).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a test trip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f316333-741b-41f2-8e34-353020a41a53",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9e39ffa-b1c9-4c59-becd-d8707f57fa38",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trips = pm.response.json();\r",
									"pm.test(\"Compare expected id to testTrip id\", function (){\r",
									"    pm.expect(trips._id).to.be.equal(pm.variables.get(\"trip_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{trip_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{trip_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e4727f8-b424-43bf-bad5-5fedaedc8af2",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86f1ee44-6e4e-4fd9-969c-0cf6b4f1a550",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var user = pm.response.json();",
									"pm.test(\"Compare expected email to testUser email\", function (){",
									"    pm.expect(pm.variables.get(\"user\").email).to.equal(user.email);",
									"});",
									"pm.test(\"Compare expected user id to testUser id\", function (){",
									"    pm.expect(pm.variables.get(\"user\").id).to.equal(user.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User That doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db356ed0-3db2-4350-b1b9-c0edd7a54871",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "70361e6c-9ed8-48aa-9a4a-f5a41df0075c",
								"exec": [
									"pm.test(\"User is not updated\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Testing endpoints for User entity\n",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Trips",
			"item": [
				{
					"name": "Create a new trip object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3669a766-16f9-4314-9c58-f0e121c016e3",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip\", pm.response.json());\r",
									"pm.environment.set(\"tripId\", pm.response.json()._id);\r",
									"\r",
									"var tripName = \"Sandras Trip\";\r",
									"var testTrip = pm.variables.get(\"testTrip\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip.name).to.equal(tripName);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e52bb3d0-2882-4480-8d56-7aa97f6ac14f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Sandras Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"5f63752c18e1524c60444c66\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of all trips",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2a0ed69-b688-4c17-98b9-8fad0f86fc78",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(pm.response.json().trips).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8aeb2873-d262-4045-b8d1-ffcb7f53c522",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "91bea8a0-b6b7-4a45-a6cb-df4032c79ccb",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedTrip = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected trip name to testTrip name\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").name).to.equal(expectedTrip.name);\r",
									"});\r",
									"pm.test(\"Compare expected trip id to testTrip id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").id).to.equal(expectedTrip.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "214332f3-c9b6-42df-93a5-3fec04925a6d",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37da26c6-4020-4d9a-bdd0-ca86839e889a",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").name).to.not.equal(pm.response.json().name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Krasens Trip\",\r\n\t\"places\": [], \r\n\t\"public\": true\n, \r\n\t\"user\": \"5f63752c18e1524c60444c66\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f88af984-423b-4930-93fa-75109149152a",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d4b76bd-c29a-478e-86ff-a8ae43232609",
								"exec": [
									"pm.test(\"Successful PATCH request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").name).to.not.equal(pm.response.json().name);\r",
									"});\r",
									"pm.test(\"Validate same values in unchanged object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").user).to.equal(pm.response.json().user);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Some new trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"5f63752c18e1524c60444c66\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create test place",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4592c65c-d8fb-4c9c-8e83-5bc4f8a47f05",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19ec2b68-a9a2-44bc-807c-b7b94c70c4b8",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);\r",
									"\r",
									"var placeName = \"Gustav II Adolfs staty\";\r",
									"var testPlace = pm.variables.get(\"testPlace\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testPlace.name).to.equal(placeName);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"Gustav II Adolfs staty\",\r\n      \"address\":{\r\n         \"city\":\"Gbg\",\r\n         \"road\":\"Norra Hamngatan\",\r\n         \"state\" :\"Västra Götalands län\",\r\n         \"county\":\"Göteborg\",\r\n         \"suburb\":\"Nordstaden\",\r\n         \"country\":\"Sverige\",\r\n         \"postcode\":\"41106\",\r\n         \"address29\":\"Gustaf Adolfs Torg\",\r\n         \"country_code\":\"se\",\r\n         \"city_district\":\"Centrum\"\r\n      },\r\n      \"wikipedia\":\"https://sv.wikipedia.org/wiki/Gustav%20II%20Adolfs%20staty%2C%20G%C3%B6teborg\",\r\n      \"image\":\"https://commons.wikimedia.org/wiki/File:G%C3%B6teborg.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"sv:Gustav II Adolfs staty, Göteborg\",\r\n         \"text\":\"Gustav II Adolfs staty är en bronsstaty av Bengt Erland Fogelberg, uppförd 1854 på Gustaf Adolfs Torg i centrala Göteborg. Statyn som är Göteborgs äldsta offentliga konstverk föreställer Gustav II Adolf pekande med höger hand ned mot torget samtidigt som han tittar i fjärran å andra hållet, och avbildar det tänkta tillfälle när kungen ska ha uttalat \\\"Här ska staden ligga!\\\", och på ett symboliskt plan representerar statyn därmed tillblivelsen av staden Göteborg. Statyn är placerad på en hög kvadratisk bronssockel ovanpå ett trappstegsformat fundament i sten. På sockeln finns inskriptionen:.\",\r\n         \"html\":\"<p><b>Gustav II Adolfs staty</b> är en bronsstaty av Bengt Erland Fogelberg, uppförd 1854 på Gustaf Adolfs Torg i centrala Göteborg. Statyn som är Göteborgs äldsta offentliga konstverk föreställer Gustav II Adolf pekande med höger hand ned mot torget samtidigt som han tittar i fjärran å andra hållet, och avbildar det tänkta tillfälle när kungen ska ha uttalat \\\"Här ska staden ligga!\\\", och på ett symboliskt plan representerar statyn därmed tillblivelsen av staden Göteborg. Statyn är placerad på en hög kvadratisk bronssockel ovanpå ett trappstegsformat fundament i sten. På sockeln finns inskriptionen:</p><p>.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":11.966817,\r\n         \"lat\":57.707104\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a place to trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84233e83-4125-4f38-a9ec-93123d4d2537",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trip = pm.response.json();\r",
									"pm.test(\"Validate that a place is added to the trip's places\", function(){\r",
									"    pm.expect(trip.places).to.contain(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc5ddd0d-4a6a-4176-98dc-92d50b917db3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"places\": \"{{placeId}}\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a place to trip which is already in the trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97a1bf30-0891-461b-addc-b481531acc42",
								"exec": [
									"pm.test(\"Place is not added\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7a218f92-60c4-47f5-a421-210d3585217e",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"places\": \"{{placeId}}\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of all places from a trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f85556d-d1f9-46ee-be1e-e206c1332e1e",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that places is not empty\", function (){\r",
									"    pm.expect(pm.response.json().places).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one place from a trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84699335-9ee1-4221-9476-9234779c43b7",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that place returned is not null\", function (){\r",
									"    pm.expect(pm.response.json()).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Validate that place has same Id\", function (){\r",
									"    pm.expect(pm.response.json().place._id).to.equal(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one place from a trip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26c4e438-b46c-4b4b-b173-1b6e3e9f2267",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "caa5748f-bf3d-4829-9a7c-5e7a5910f5f9",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var placeId = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\")).to.not.contain(placeId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a place to trip Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b23f2bf-73b9-4ef6-b402-76c8a1c57d84",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trip = pm.response.json();\r",
									"pm.test(\"Validate that a place is added to the trip's places\", function(){\r",
									"    pm.expect(trip.places).to.contain(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"places\": \"{{placeId}}\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all places from a trip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80e3e092-b296-4227-adc4-b4371a91fc2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e14b6fa-2634-46df-8cb7-b17f8a1639e2",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that places is empty\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").places).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe8af22f-ecf1-4d3e-a434-36e9a8df5b8b",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fab41a18-3099-47fc-9c97-d4a6535fb59d",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var place = pm.response.json();\r",
									"pm.test(\"Compare expected id to testTrip id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").id).to.equal(place.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a place by id Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b0e8e89-6ad0-4750-86fe-e1bc804aed31",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d4df64e-dd0c-41fe-8eac-448da6b5170b",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var place = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").id).to.equal(place.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d883e86-c8fa-4b21-88a8-8eeb9798ac42",
								"exec": [
									"pm.variables.set( \"email\", \"testemail@test.com\");",
									"pm.variables.set(\"password\", \"testpassword\");",
									"pm.environment.set( \"first_name\", \"test_first_name\");",
									"pm.environment.set( \"last_name\", \"test_last_name\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "510c904d-365c-4200-97b1-4e33cb84bc09",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user = pm.response.json();",
									"pm.test(\"Verify that user is created with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct last name\", function() {",
									"    pm.expect(user.last_name).to.equal(pm.variables.get(\"last_name\"));",
									"});",
									"pm.environment.set(\"user\", user);",
									"pm.environment.set(\"user_id\", user._id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43b6915e-6ef9-4480-a3fe-c3d326a4c727",
								"exec": [
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))\r",
									"pm.environment.set(\"date\", Date.now())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ecd4fe3b-f5ba-4010-8dc1-72fee8c50ff8",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Successful author validation\", function(){\r",
									"    pm.expect(pm.environment.get(\"testPost\").author).to.equal(pm.environment.get(\"user_id\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset\",\r\n\t\"author\": \"{{user_id}}\",\r\n\t\"date\": \"{{date}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create duplicate post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2048ba1d-e1f0-4e9b-a5b9-fa90d19e616d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "235cf972-3a67-4b77-a052-988a1b9f5c9b",
								"exec": [
									"pm.test(\"Title already created\", function(){\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a8b50acd-57f6-489a-895b-2f2d74559459",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5fe5fd22-0ed5-4027-a47f-18775a71fe13",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(pm.response.json().posts).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get post by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "461d35de-e937-4e65-93cd-453c631c8272",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e1de055-d8b7-4ad7-a40c-f000eca33675",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedPost = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected post title to testPost title\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPost\").title).to.equal(expectedPost.title);\r",
									"});\r",
									"pm.test(\"Compare expected post id to testPost id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPost\")._id).to.equal(expectedPost._id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create secondPost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a1ffc52-5b8f-40de-bb43-72b1a67680a0",
								"exec": [
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))\r",
									"pm.environment.set(\"date\", Date.now())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a64ee86-7cd6-4c92-a290-f887650c4fed",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Successful author validation\", function(){\r",
									"    pm.expect(pm.environment.get(\"testPost\").author).to.equal(pm.environment.get(\"user_id\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset\",\r\n\t\"author\": \"{{user_id}}\",\r\n\t\"date\": \"{{date}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts for specific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4b9f945-89f0-4555-992b-4197763fa0eb",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6a6c913-ff53-4055-bf8e-216c67d225f9",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedPostList = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if post result list is not empty\", function (){\r",
									"    pm.expect(expectedPostList.length).to.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if not empty\", function () {\r",
									"\tpm.expect(expectedPostList).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts?user={{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							],
							"query": [
								{
									"key": "user",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a post by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93e66fd0-7e4a-4c86-a4ed-09133e5cff2b",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a93d559-a712-4a4d-a43b-db3b6d8aa9e1",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset with @Sven\",\r\n    \"author\": \"{{user_id}}\",\r\n    \"date\": \"{{date}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a post by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b482bacc-5b1e-4b7c-9860-c11d7a871927",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea739351-6170-4d06-be27-2660fe00ba75",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"New text\",\r\n    \"author\": \"{{user_id}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a post by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e24fb3db-c6f8-470d-a1b7-6966b59b0337",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c5467166-70e8-494e-a626-3042fea2c949",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var post = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPost id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPost\")._id).to.equal(post._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all posts in database",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6548e8f2-0e9d-4c1d-a6f1-beaeef10de49",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b87a66e-2c81-49bf-9cbe-a76b82da187a",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check deleted post count\", function () {\r",
									"\tpm.expect(pm.response.json().deletedCount).to.equal(1)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Places",
			"item": [
				{
					"name": "Create place object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9c9da9b-56bb-46c9-bc9d-fe2052ab5826",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfb706b7-480f-44e6-91d0-fab0178d116a",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									"pm.environment.set(\"placeId\", pm.response.json()._id);\r",
									"\r",
									"var placeName = \"Gustav II Adolfs staty\";\r",
									"var testPlace = pm.variables.get(\"testPlace\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testPlace.name).to.equal(placeName);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"Gustav II Adolfs staty\",\r\n      \"address\":{\r\n         \"city\":\"Gbg\",\r\n         \"road\":\"Norra Hamngatan\",\r\n         \"state\" :\"Västra Götalands län\",\r\n         \"county\":\"Göteborg\",\r\n         \"suburb\":\"Nordstaden\",\r\n         \"country\":\"Sverige\",\r\n         \"postcode\":\"41106\",\r\n         \"address29\":\"Gustaf Adolfs Torg\",\r\n         \"country_code\":\"se\",\r\n         \"city_district\":\"Centrum\"\r\n      },\r\n      \"wikipedia\":\"https://sv.wikipedia.org/wiki/Gustav%20II%20Adolfs%20staty%2C%20G%C3%B6teborg\",\r\n      \"image\":\"https://commons.wikimedia.org/wiki/File:G%C3%B6teborg.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"sv:Gustav II Adolfs staty, Göteborg\",\r\n         \"text\":\"Gustav II Adolfs staty är en bronsstaty av Bengt Erland Fogelberg, uppförd 1854 på Gustaf Adolfs Torg i centrala Göteborg. Statyn som är Göteborgs äldsta offentliga konstverk föreställer Gustav II Adolf pekande med höger hand ned mot torget samtidigt som han tittar i fjärran å andra hållet, och avbildar det tänkta tillfälle när kungen ska ha uttalat \\\"Här ska staden ligga!\\\", och på ett symboliskt plan representerar statyn därmed tillblivelsen av staden Göteborg. Statyn är placerad på en hög kvadratisk bronssockel ovanpå ett trappstegsformat fundament i sten. På sockeln finns inskriptionen:.\",\r\n         \"html\":\"<p><b>Gustav II Adolfs staty</b> är en bronsstaty av Bengt Erland Fogelberg, uppförd 1854 på Gustaf Adolfs Torg i centrala Göteborg. Statyn som är Göteborgs äldsta offentliga konstverk föreställer Gustav II Adolf pekande med höger hand ned mot torget samtidigt som han tittar i fjärran å andra hållet, och avbildar det tänkta tillfälle när kungen ska ha uttalat \\\"Här ska staden ligga!\\\", och på ett symboliskt plan representerar statyn därmed tillblivelsen av staden Göteborg. Statyn är placerad på en hög kvadratisk bronssockel ovanpå ett trappstegsformat fundament i sten. På sockeln finns inskriptionen:</p><p>.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":11.966817,\r\n         \"lat\":57.707104\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all places",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c31633ff-f009-4fa0-b54f-0a6b16cc9333",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d074e8a-90f6-47d4-bad5-602b6162cb78",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(pm.response.json().places).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get places pagination",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "505bd732-3366-47a6-b198-4b0c6dc95550",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "603d18a7-d3cb-43cd-8aa8-526055c2231e",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var paginatedPlaces = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate that results are reseived and are not empty\", function (){\r",
									"    pm.expect(paginatedPlaces.results).to.be.not.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places?page=1&limit=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f2983f2-b2a7-4bf7-9558-cf28e6e8a982",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcad67da-765a-4623-ba13-b4cfaf097e4a",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedPlace = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected place name to testPlace name\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").name).to.equal(expectedPlace.name);\r",
									"});\r",
									"pm.test(\"Compare expected place id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").id).to.equal(expectedPlace.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b829a1b-f1da-41a5-bf54-c3f6e4cced53",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "251c0355-4c73-4a83-8d79-bdcdf92f3a03",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").name).to.not.equal(pm.response.json().name);\r",
									"    pm.expect(pm.variables.get(\"testPlace\").address).to.not.equal(pm.response.json().address);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"Göteborgs stadshus\",\r\n      \"address\":{\r\n          \"city\":\"Gbg\",\r\n         \"road\":\"Gustaf Adolfs Torg\",\r\n         \"state\":\"Västra Götalands län\",\r\n         \"county\":\"Göteborg\",\r\n         \"suburb\":\"Nordstaden\",\r\n         \"country\":\"Sverige\",\r\n         \"postcode\":\"41106\",\r\n         \"country_code\":\"se\",\r\n         \"house_number\":\"4A\",\r\n         \"city_district\":\"Centrum\"\r\n      },\r\n      \"wikipedia\":\"https://sv.wikipedia.org/wiki/G%C3%B6teborgs%20stadshus\",\r\n      \"image\":\"https://commons.wikimedia.org/wiki/File:Nordst_16_2_Gbg_Stadshus_1.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"sv:Göteborgs stadshus\",\r\n         \"text\":\"Stadshuset i Göteborg, ligger vid Gustaf Adolfs torg 4 och Postgatan 35 - en genomgående tomt - i stadsdelen Nordstaden i centrala Göteborg. Stadshuset är förvaltningsbyggnad för Göteborgs stad med sammanträdessal och tjänsterum för kommunstyrelsen. Mot torget har huvudbyggnaden tre och en halv våning slätputsad fasad, med en nyklassicistisk stil och en utbyggd entréport. På andra sidan, mot Postgatan, finns ett tvåvåningshus med ett högt brant tak och en putsad fasad som är indelad med lisener. Stadshuset är uppfört mellan det Wenngrenska huset och Börsen. Det är byggnadsminne sedan 24 oktober 1968 respektive 21 december 1973.\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":11.966537,\r\n         \"lat\":57.707436\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "840a714e-8862-4a5f-b25d-caae51222363",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d750b1a4-232b-4cbe-942f-6f8f524c76f1",
								"exec": [
									"pm.test(\"Successful PATCH request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").name).to.not.equal(pm.response.json().name);\r",
									"    pm.expect(pm.variables.get(\"testPlace\").address).to.not.equal(pm.response.json().address);\r",
									"});\r",
									"pm.test(\"Validate same values in unchanged object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").title).to.equal(pm.response.json().title);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"Göteborgs new name\",\r\n      \"address\":{\r\n          \"city\":\"Gbg-test\",\r\n         \"road\":\"Gustaf Adolfs Torg- test\",\r\n         \"state\":\"Västra Götalands län - test\",\r\n         \"county\":\"Göteborg - test\",\r\n         \"suburb\":\"Nordstaden - test\",\r\n         \"country\":\"Sverige- test\",\r\n         \"postcode\":\"41106 - test\",\r\n         \"country_code\":\"se - test\",\r\n         \"house_number\":\"4A - test\",\r\n         \"city_district\":\"Centrum -  test\" \r\n      },\r\n      \"wikipedia\":\"https://sv.wikipedia.org/wiki/G%C3%B6teborgs%20stadshus\",\r\n      \"image\":\"https://commons.wikimedia.org/wiki/File:Nordst_16_2_Gbg_Stadshus_1.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"sv:Göteborgs stadshus  test\",\r\n         \"text\":\"Stadshuset i Göteborg, ligger vid Gustaf Adolfs torg 4 och Postgatan 35 - en genomgående tomt - i stadsdelen Nordstaden i centrala Göteborg. Stadshuset är förvaltningsbyggnad för Göteborgs stad med sammanträdessal och tjänsterum för kommunstyrelsen. Mot torget har huvudbyggnaden tre och en halv våning slätputsad fasad, med en nyklassicistisk stil och en utbyggd entréport. På andra sidan, mot Postgatan, finns ett tvåvåningshus med ett högt brant tak och en putsad fasad som är indelad med lisener. Stadshuset är uppfört mellan det Wenngrenska huset och Börsen. Det är byggnadsminne sedan 24 oktober 1968 respektive 21 december 1973.\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":11.966537,\r\n         \"lat\":57.707436\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1113ff3d-487e-44e7-833e-77d846414e9d",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5408f383-d04f-4c85-b297-4517773180e9",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var place = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").id).to.equal(place.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3e367522-b8d1-4a06-b3e8-97da37ea64d8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6f60b7a4-9a9c-4e62-8e62-bf81c58e536b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "45972917-800b-4277-a001-c5939d6c602d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "eebc960e-8194-4f99-9486-1216bbf64037",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}