{
	"info": {
		"_postman_id": "0029fe75-5809-4a9c-a82b-0f865b8f6fae",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab5bc34c-1e55-4183-838c-4b034f4bcc6a",
								"exec": [
									"pm.environment.set( \"email\", \"example@test.com\");",
									"pm.environment.set( \"password\", \"example\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e308bce-dac0-4e68-8dab-f87ebb0b925f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user = pm.response.json();",
									"pm.test(\"Verify that user is created with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user without email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dfa8e5f3-ce5d-405f-a632-e93dce203ea9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "726eb702-3aea-4ea6-8b28-22a5ae8dbe0a",
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user without password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "738b9a08-5d74-4813-95cf-6a126fbe07eb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "216f55cb-fb27-4c69-9960-a56d6a9ece6e",
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"email\": \"{{email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with first name and last name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ead57c0-1553-44a1-a93c-b5a17b542839",
								"exec": [
									"pm.variables.set( \"email\", \"testemail@test.com\");",
									"pm.variables.set(\"password\", \"testpassword\");",
									"pm.environment.set( \"first_name\", \"test_first_name\");",
									"pm.environment.set( \"last_name\", \"test_last_name\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ae77c7e0-5093-4353-935b-f276e961e11f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user = pm.response.json();",
									"pm.test(\"Verify that user is created with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct last name\", function() {",
									"    pm.expect(user.last_name).to.equal(pm.variables.get(\"last_name\"));",
									"});",
									"pm.environment.set(\"user\", user);",
									"pm.environment.set(\"user_id\", user._id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1efebad-20ee-4459-b0c0-deb8e2243e60",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "20695fc0-ec38-44f3-a5e2-1166e34b4438",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Verify that user is logged in\", function() {",
									"    pm.expect(pm.variables.get(\"email\")).to.equal(user.email);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24ef4dc0-dd4b-47d7-8c29-a9be958dd10c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b6df4f6-14ec-4384-9904-dbda3bb20047",
								"exec": [
									"pm.test(\"User is not loged in without password\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0b9445b-77e8-400c-aac4-0c12e3b83180",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35e5fc7c-84e8-4ebf-97e9-530119417e52",
								"exec": [
									"pm.test(\"User is not loged in without password\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace all user data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "873eeea8-b32e-45c3-a75c-d1c76bf0c6ca",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									"pm.variables.set(\"email\", \"newemail@email.com\");",
									"pm.variables.set(\"first_name\",\"new_first_name\");",
									"pm.variables.set(\"last_name\", \"new_last_name\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf764d85-6c7c-45c0-ac66-133fad5f486a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Verify that user is updated with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is updated with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.test(\"Verify that user is updated with correct last name\", function() {",
									"    pm.expect(user.last_name).to.equal(pm.variables.get(\"last_name\"));",
									"});",
									"",
									"pm.variables.set(\"user\", user);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"favourite_places\": [],\r\n    \"trips\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "replace user With partial dataset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ebd6f7b8-8c28-4230-835c-aff85a3e4a7c",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									"pm.variables.set(\"email\", \"newemail@email.com\");",
									"pm.variables.set(\"first_name\",\"new_first_name\");",
									"pm.variables.set(\"last_name\", \"new_last_name\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1412805e-ff01-424a-b3bf-bd1d4e525853",
								"exec": [
									"pm.test(\"User is not updated\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"favourite_places\": [],\r\n    \"trips\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update only email and first name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ce10c44-b9fe-45cb-885e-3b206c34835a",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									"pm.variables.set(\"email\", \"newsecondemail@email.com\");",
									"pm.variables.set(\"first_name\",\"new_second_first_name\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5217ea3-d48c-430f-a7ae-66ca20c9dcec",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Verify that user is updated with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is updated with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.variables.set(\"user\", user);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1719941-a4a9-4c5e-91ca-67a95dc6e125",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "999e6f90-56b1-4cc9-b593-070a5566d9ed",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var users = pm.response.json().users;",
									"",
									"pm.test(\"Validate that user dataset is not empty\", function (){",
									"    pm.expect(users).to.be.not.empty;",
									"\tpm.expect(users.length).to.be.equal(2);",
									"\tpm.expect(users[1].email).to.be.equal(pm.variables.get(\"email\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user that doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6939bb8c-9320-483d-aa9b-1ce40d4dfd3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "404aa6fa-9b18-4a78-9a9f-aaa54994e882",
								"exec": [
									"pm.test(\"No users are returned\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/43124",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"43124"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a spesific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de450473-ce9a-4cdc-b1e4-277056743481",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35e8e9fb-5f5f-42e2-9740-01e595847026",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var user = pm.response.json();",
									"",
									"pm.test(\"Compare expected email to testUser name\", function (){",
									"    pm.expect(pm.variables.get(\"user\").email).to.equal(user.email);",
									"});",
									"pm.test(\"Compare expected user id to testUser id\", function (){",
									"    pm.expect(pm.variables.get(\"user\").id).to.equal(user.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a test trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e212c3eb-6868-4906-b452-429307b170db",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip\", pm.response.json());\r",
									"\r",
									"\r",
									"var tripName = \"Sandras Trip\";\r",
									"var testTrip = pm.variables.get(\"testTrip\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip.name).to.equal(tripName);\r",
									"});\r",
									"pm.environment.set(\"trip_id\", pm.variables.get(\"testTrip\")._id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9fbb08cd-ca20-4f62-984f-66cc090636fd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Sandras Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"{{user_id}}\",\r\n\t\"public\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43be42b3-c665-49fe-a2fb-eb98707dbe16",
								"exec": [
									"pm.test(\"Successful Added Trip request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var user = pm.response.json();\r",
									"pm.test(\"Validate that a trip is added to the trip list\", function(){\r",
									"    pm.expect(user.trips).to.contain(pm.variables.get(\"trip_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81040a26-8db8-4b8c-8f94-1244f2c0576c",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n     \"trip\": \"{{trip_id}}\"\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a trip that already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c124b2d8-4bc6-4d0f-ae91-4da38cc612e0",
								"exec": [
									"pm.test(\"Fail to Add Trip that exists\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53772f7e-ad3e-4bd8-a6a4-6a22587ca39c",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n     \"trip\": \"{{trip_id}}\"\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all trips for specific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45e96922-b27e-4556-a518-5e50de6ab265",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e165a4f-aa29-4061-b057-f580785ff0de",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var myTrips = pm.response.json().trips;\r",
									"\r",
									"pm.test(\"Check if my trips result list is not empty\", function (){\r",
									"    pm.expect(myTrips.length).to.equal(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if not empty\", function () {\r",
									"\tpm.expect(myTrips).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips?user={{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							],
							"query": [
								{
									"key": "user",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a trip by id'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bd7a3c6-c530-4122-a08c-4650fea77b49",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85524512-0509-46d8-a8b3-37a4116633f8",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var user = pm.response.json();\r",
									"pm.test(\"Compare expected id to testTrip id\", function (){\r",
									"    pm.expect(user.trips).to.not.contain(pm.variables.get(\"trip_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips/{{trip_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips",
								"{{trip_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a trip Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71ae635c-ff3a-45fa-8391-29c3f3fe1f53",
								"exec": [
									"pm.test(\"Successful Added Trip request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var user = pm.response.json();\r",
									"pm.test(\"Validate that a trip is added to the trip list\", function(){\r",
									"    pm.expect(user.trips).to.contain(pm.variables.get(\"trip_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a2efb76-6204-4be6-909a-f4f3b662e9e0",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n     \"trip\": \"{{trip_id}}\"\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all trips for user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a6ab3d31-a7d3-4747-96c1-3e8b7d53223e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2bf689e-47c4-465c-904f-4a2433067eaa",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trips = pm.response.json().trips;\r",
									"pm.test(\"Validate that trips is empty\", function (){\r",
									"    pm.expect(trips.length).to.be.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a test trip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20bb7a5f-6693-45cd-b76b-ef80f215151e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a679d2ee-fafb-4cb5-8e56-c75e23b5855d",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trips = pm.response.json();\r",
									"pm.test(\"Compare expected id to testTrip id\", function (){\r",
									"    pm.expect(trips._id).to.be.equal(pm.variables.get(\"trip_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{trip_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{trip_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "01b880b3-91c8-4240-8938-b1387c594ff5",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b79bbde2-be7b-4564-b1ae-e89da4b2043d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var user = pm.response.json();",
									"pm.test(\"Compare expected email to testUser email\", function (){",
									"    pm.expect(pm.variables.get(\"user\").email).to.equal(user.email);",
									"});",
									"pm.test(\"Compare expected user id to testUser id\", function (){",
									"    pm.expect(pm.variables.get(\"user\").id).to.equal(user.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User That doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "825bed2d-1dfe-4b0a-ba23-6cfda7a4f168",
								"exec": [
									"pm.variables.set(\"user_id\", pm.variables.get(\"user\")._id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3fdd77b-b0c7-4ee4-85c0-df2548ea4e8a",
								"exec": [
									"pm.test(\"User is not updated\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Testing endpoints for User entity\n",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Trips",
			"item": [
				{
					"name": "Create a new public trip object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2f47da7-6e6e-4870-ba29-a26c2ef20265",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip\", pm.response.json());\r",
									"pm.environment.set(\"tripId\", pm.response.json()._id);\r",
									"\r",
									"var tripName = \"Sandras Trip\";\r",
									"var testTrip = pm.variables.get(\"testTrip\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip.name).to.equal(tripName);\r",
									"\tpm.expect(testTrip.public).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb28d6d2-035d-4aaa-ac05-da70abf9ce3f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Sandras Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"5f63752c18e1524c60444c66\",\r\n\t\"public\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new private trip object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d34dfc97-2fbb-4c89-b418-51cfff77ac67",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip2\", pm.response.json());\r",
									"pm.environment.set(\"tripId2\", pm.response.json()._id);\r",
									"\r",
									"var tripName = \"Samuels private Trip\";\r",
									"var testTrip2 = pm.variables.get(\"testTrip2\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip2.name).to.equal(tripName);\r",
									"\tpm.expect(testTrip2.public).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "231e99df-22b8-4b82-86a2-88dbd9265c0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Samuels private Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"5f63752c18e1524c60444c66\",\r\n\t\"public\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of all public trips",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6c3898d-ae66-4827-932c-5dd0ceaebe1b",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(pm.response.json().trips).to.be.not.empty;\r",
									"\tpm.expect(pm.response.json().trips.length).to.be.equal(1)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips?public=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							],
							"query": [
								{
									"key": "public",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of all trips",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ff9a022-a193-46de-8b56-3fd9d0b3efe2",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(pm.response.json().trips).to.be.not.empty;\r",
									"\tpm.expect(pm.response.json().trips.length).to.be.equal(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2827de9c-3f04-4953-8b2b-0224f26da02b",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06cc82a1-f08a-4f5b-8256-8ee2730fd078",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedTrip = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected trip name to testTrip name\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").name).to.equal(expectedTrip.name);\r",
									"});\r",
									"pm.test(\"Compare expected trip id to testTrip id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").id).to.equal(expectedTrip.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e885cbb-dd22-452d-98fd-d8e1e71e5a95",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02beb304-b03e-41b0-8984-b368da2d6924",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").name).to.not.equal(pm.response.json().name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Krasens Trip\",\r\n\t\"places\": [], \r\n\t\"public\": true, \r\n\t\"user\": \"5f63752c18e1524c60444c66\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94137bcb-2c2e-44fb-ab96-2fa2db973838",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9cfdf326-4dac-4fbc-b604-b171fda11d84",
								"exec": [
									"pm.test(\"Successful PATCH request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").name).to.not.equal(pm.response.json().name);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Some new trip\",\r\n\t\"places\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create test place",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "713c57e4-8b85-4e7a-b0ad-66e0382cabeb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c1d9002a-f0e8-4402-9ad5-d0d353ccb33a",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);\r",
									"\r",
									"var placeName = \"LaFayette Park\";\r",
									"var testPlace = pm.variables.get(\"testPlace\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testPlace.name).to.equal(placeName);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"LaFayette Park\",\r\n      \"address\":{\r\n         \"city\":\"Albany\",\r\n         \"road\":\"Elk Street\",\r\n         \"state\":\"New York\",\r\n         \"county\":\"Albany County\",\r\n         \"country\":\"United States of America\",\r\n         \"postcode\":\"12207\",\r\n         \"country_code\":\"us\",\r\n         \"house_number\":\"33\",\r\n         \"neighbourhood\":\"Sheridan Hollow\"\r\n      },\r\n      \"wikipedia\":\"https://en.wikipedia.org/wiki/Lafayette%20Park%20Historic%20District\",\r\n      \"image\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Elk_Street_Albany.jpg/400px-Elk_Street_Albany.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"en:Lafayette Park Historic District\",\r\n         \"text\":\"The Lafayette Park Historic District is located in central Albany, New York, United States. It includes the park and the combination of large government buildings and small rowhouses on the neighboring streets. In 1978 it was recognized as a historic district and listed on the National Register of Historic Places (NRHP). Many of its contributing properties are themselves listed on the National Register. One of them, the New York State Capitol, is a National Historic Landmark as well. City hall and the building housing Albany County government, along with the state's highest court and the offices of its Education Department. The Episcopal Diocese of Albany also has its cathedral within the district.\",\r\n         \"html\":\"<p>The <b>Lafayette Park Historic District</b> is located in central Albany, New York, United States. It includes the park and the combination of large government buildings and small rowhouses on the neighboring streets. In 1978 it was recognized as a historic district and listed on the National Register of Historic Places (NRHP). Many of its contributing properties are themselves listed on the National Register. One of them, the New York State Capitol, is a National Historic Landmark as well. City hall and the building housing Albany County government, along with the state's highest court and the offices of its Education Department. The Episcopal Diocese of Albany also has its cathedral within the district.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":-73.755806,\r\n         \"lat\":42.653233\r\n      }\r\n   }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a place to trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dc8e6f2-0174-4d77-85d9-df3cc0e3e2f2",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trip = pm.response.json();\r",
									"pm.test(\"Validate that a place is added to the trip's places\", function(){\r",
									"    pm.expect(trip.places).to.contain(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e4052c4d-a0d7-4735-9510-412f946395d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"places\": \"{{placeId}}\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a place to trip which is already in the trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d10e3f5d-5a9e-4fd8-bf7d-c3df76232c33",
								"exec": [
									"pm.test(\"Place is not added\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb844fbe-3330-4206-9a7a-85e2334b7abb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"places\": \"{{placeId}}\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of all places from a trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0ee444c-02e3-40eb-8608-df76e8dde41d",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that places is not empty\", function (){\r",
									"    pm.expect(pm.response.json().places).to.be.not.empty;\r",
									"\tpm.expect(pm.response.json().places).to.contain(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one place from a trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96916508-eea0-4643-98d0-4301de031ed4",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that place returned is not null\", function (){\r",
									"    pm.expect(pm.response.json()).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Validate that place has same Id\", function (){\r",
									"    pm.expect(pm.response.json().place._id).to.equal(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one place from a trip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "84dd0492-bff6-4818-af73-cf6d808fdc8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2f164cf-d0d0-4a5a-8a4a-64d1d43f049f",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var placeId = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\")).to.not.contain(placeId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a place to trip 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4923a0fa-3eb7-4352-8c41-f56a5d740005",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var trip = pm.response.json();\r",
									"pm.test(\"Validate that a place is added to the trip's places\", function(){\r",
									"    pm.expect(trip.places).to.contain(pm.variables.get(\"placeId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"places\": \"{{placeId}}\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all places from a trip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9bf61760-8c6c-4af7-b815-40558922bc46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50ea456a-298d-4a72-bed4-e07f67fe0b6c",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that places is empty\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").places).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a trip by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c773773-4928-455a-9cb2-d4fcfc6151da",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e0814f67-5665-4519-975d-dea2611c1ed0",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var place = pm.response.json();\r",
									"pm.test(\"Compare expected id to testTrip id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testTrip\").id).to.equal(place.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/{{tripId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								"{{tripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all trips in database",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f95cccb-fbaa-4d06-a1c5-79e04986f10d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e182c54-8cb4-4634-b2c9-39246ccc9541",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check deleted trips count\", function () {\r",
									"\tpm.expect(pm.response.json().deletedCount).to.equal(1)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new public trip object 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fd6c4b6-5de3-4582-9b16-07495e7db937",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip\", pm.response.json());\r",
									"pm.environment.set(\"tripId\", pm.response.json()._id);\r",
									"\r",
									"var tripName = \"Sandras Trip\";\r",
									"var testTrip = pm.variables.get(\"testTrip\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip.name).to.equal(tripName);\r",
									"\tpm.expect(testTrip.public).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2b10f972-ffbe-4b0c-b14d-b65451249a29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Sandras Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"5f63752c18e1524c60444c66\",\r\n\t\"public\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new private trip object 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5e6f408-a8c9-4d9a-b9c0-a270f8a107d2",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testTrip2\", pm.response.json());\r",
									"pm.environment.set(\"tripId2\", pm.response.json()._id);\r",
									"\r",
									"var tripName = \"Samuels private Trip\";\r",
									"var testTrip2 = pm.variables.get(\"testTrip2\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testTrip2.name).to.equal(tripName);\r",
									"\tpm.expect(testTrip2.public).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "12265e23-ff7c-45cc-b5c8-303e9c88e0d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Samuels private Trip\",\r\n\t\"places\": [],\r\n\t\"user\": \"5f63752c18e1524c60444c66\",\r\n\t\"public\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/trips/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a test place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc981cad-cd04-4f58-901f-4c810e574796",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd688ba1-7650-4441-a6a9-558181f01e0c",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var place = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").id).to.equal(place.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all trips for specific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a988773-8c51-4558-9015-e640f921be04",
								"exec": [
									"pm.variables.set(\"tripId\", pm.variables.get(\"testTrip\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78fd8c91-3454-4e35-8326-da70c542102d",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check deleted trips count for user\", function () {\r",
									"\tpm.expect(pm.response.json().deletedCount).to.equal(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/trips?user=5f63752c18e1524c60444c66",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"trips"
							],
							"query": [
								{
									"key": "user",
									"value": "5f63752c18e1524c60444c66"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4dedcfa4-3696-4a37-baeb-721bcf843d0d",
								"exec": [
									"pm.variables.set( \"email\", \"testemail@test.com\");",
									"pm.variables.set(\"password\", \"testpassword\");",
									"pm.environment.set( \"first_name\", \"test_first_name\");",
									"pm.environment.set( \"last_name\", \"test_last_name\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa50cc73-4115-4f5f-a643-5ee7077cc1d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var user = pm.response.json();",
									"pm.test(\"Verify that user is created with correct email\", function() {",
									"    pm.expect(user.email).to.equal(pm.variables.get(\"email\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct first name\", function() {",
									"    pm.expect(user.first_name).to.equal(pm.variables.get(\"first_name\"));",
									"});",
									"",
									"pm.test(\"Verify that user is created with correct last name\", function() {",
									"    pm.expect(user.last_name).to.equal(pm.variables.get(\"last_name\"));",
									"});",
									"pm.environment.set(\"post_user\", user);",
									"pm.environment.set(\"post_user_id\", user._id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2b5e22e2-5d09-4271-b10d-e79263081533",
								"exec": [
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))\r",
									"pm.environment.set(\"date\", Date.now())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "20f552f5-0449-4d92-85eb-d626340bd578",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Successful author validation\", function(){\r",
									"    pm.expect(pm.environment.get(\"testPost\").author).to.equal(pm.environment.get(\"post_user_id\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset\",\r\n\t\"author\": \"{{post_user_id}}\",\r\n\t\"date\": \"{{date}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create duplicate post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a47e30a-9241-4c24-8422-7abda6162728",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e24d100a-b544-40d5-b2bc-6e568a0c639a",
								"exec": [
									"pm.test(\"Title already created\", function(){\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be5100b5-e1eb-401f-aecb-dfdfbf3818f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b5245f2-eeb2-4152-9b93-2fef85e1bfb0",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(pm.response.json().posts).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Check elements in post responce validation\", function(){\r",
									"    pm.expect(pm.response.json().posts[0].title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get post by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e850915-280e-4b38-8ab4-de2e54f1e47e",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d2006a7-1e9a-4c07-80fe-be9d6e5834ef",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedPost = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected post title to testPost title\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPost\").title).to.equal(expectedPost.title);\r",
									"});\r",
									"pm.test(\"Compare expected post id to testPost id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPost\")._id).to.equal(expectedPost._id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create secondPost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "76e1a524-0711-43b6-a7f0-e1e488940f10",
								"exec": [
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))\r",
									"pm.environment.set(\"date\", Date.now())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19706d6b-9046-4062-824d-e925051f69c7",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Successful author validation\", function(){\r",
									"    pm.expect(pm.environment.get(\"testPost\").author).to.equal(pm.environment.get(\"post_user_id\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"I had a wonderful time eating finnish buns in the sunset\",\r\n\t\"author\": \"{{post_user_id}}\",\r\n\t\"date\": \"{{date}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts for specific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e985163f-3eed-474d-9ff8-ee141b8991d7",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0bfde86-2e49-4052-b05a-dddd5b017ac4",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedPostList = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if post result list is not empty\", function (){\r",
									"    pm.expect(expectedPostList.length).to.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if not empty\", function () {\r",
									"\tpm.expect(expectedPostList).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts?user={{post_user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							],
							"query": [
								{
									"key": "user",
									"value": "{{post_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a post by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c5ab690-7883-46e6-8a24-40c625c899de",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25987907-d19f-4a08-bf9c-28cd13e5e8ea",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});\r",
									"pm.test(\"Successful text validation\", function(){\r",
									"    pm.expect(pm.environment.get(\"testPost\").text).to.equal(\"Test text\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"Test text\",\r\n    \"author\": \"{{user_id}}\",\r\n    \"date\": \"{{date}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a post by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "102ef7a1-6251-4490-812e-7e189b44356d",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);\r",
									"pm.environment.set(\"postTitle\", pm.variables.replaceIn('{{$randomCatchPhrase}}'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f668fab0-4955-4db1-964b-cf62a98a4387",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPost\", pm.response.json());\r",
									"\r",
									"var title = pm.environment.get(\"testPost\").title;\r",
									"\r",
									"pm.test(\"Successful title validation\", function(){\r",
									"    pm.expect(title).to.equal(pm.environment.get(\"postTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{postTitle}}\",\r\n    \"text\": \"New text\",\r\n    \"author\": \"{{user_id}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a post by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31187745-1e0e-41e4-9c04-89118021b3b2",
								"exec": [
									"pm.variables.set(\"postId\", pm.variables.get(\"testPost\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f056da32-4814-4e81-aa5a-e5d4018c65c3",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var post = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPost id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPost\")._id).to.equal(post._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{postId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all posts in database",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a506ca49-812e-4e10-aba6-b8587367d6e5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "44728f27-6e20-4cdb-8a91-fd680c934fde",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check deleted post count\", function () {\r",
									"\tpm.expect(pm.response.json().deletedCount).to.equal(1)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Places",
			"item": [
				{
					"name": "Create place object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d9919fe-4ec9-4fa7-b7ea-10fac0561e1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a7ff56d-b08f-465b-9ea2-b5b454eac893",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									"pm.environment.set(\"placeId\", pm.response.json()._id);\r",
									"\r",
									"var placeName = \"LaFayette Park\";\r",
									"var testPlace = pm.variables.get(\"testPlace\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testPlace.name).to.equal(placeName);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"LaFayette Park\",\r\n      \"address\":{\r\n         \"city\":\"Albany\",\r\n         \"road\":\"Elk Street\",\r\n         \"state\":\"New York\",\r\n         \"county\":\"Albany County\",\r\n         \"country\":\"United States of America\",\r\n         \"postcode\":\"12207\",\r\n         \"country_code\":\"us\",\r\n         \"house_number\":\"33\",\r\n         \"neighbourhood\":\"Sheridan Hollow\"\r\n      },\r\n      \"wikipedia\":\"https://en.wikipedia.org/wiki/Lafayette%20Park%20Historic%20District\",\r\n      \"image\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Elk_Street_Albany.jpg/400px-Elk_Street_Albany.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"en:Lafayette Park Historic District\",\r\n         \"text\":\"The Lafayette Park Historic District is located in central Albany, New York, United States. It includes the park and the combination of large government buildings and small rowhouses on the neighboring streets. In 1978 it was recognized as a historic district and listed on the National Register of Historic Places (NRHP). Many of its contributing properties are themselves listed on the National Register. One of them, the New York State Capitol, is a National Historic Landmark as well. City hall and the building housing Albany County government, along with the state's highest court and the offices of its Education Department. The Episcopal Diocese of Albany also has its cathedral within the district.\",\r\n         \"html\":\"<p>The <b>Lafayette Park Historic District</b> is located in central Albany, New York, United States. It includes the park and the combination of large government buildings and small rowhouses on the neighboring streets. In 1978 it was recognized as a historic district and listed on the National Register of Historic Places (NRHP). Many of its contributing properties are themselves listed on the National Register. One of them, the New York State Capitol, is a National Historic Landmark as well. City hall and the building housing Albany County government, along with the state's highest court and the offices of its Education Department. The Episcopal Diocese of Albany also has its cathedral within the district.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":-73.755806,\r\n         \"lat\":42.653233\r\n      }\r\n   }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all places",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1244a8f7-0715-47b2-a228-05980d886e7f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2704f55-b6a0-4b4e-9c38-993be48465d8",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var places = pm.response.json().places;\r",
									"\r",
									"pm.test(\"Validate that database is not empty\", function (){\r",
									"    pm.expect(places).to.be.not.empty;\r",
									"\tpm.expect(places.length).to.be.equal(1);\r",
									"\tpm.expect(places[0].name).to.be.equal(\"LaFayette Park\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get places pagination",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d7818249-ae8a-453d-b52d-a57a40b39b59",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d63d805-d30f-4a15-95e7-02d8d6d40e64",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var paginatedPlaces = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate that results are reseived and are not empty\", function (){\r",
									"    pm.expect(paginatedPlaces.results).to.be.not.empty;\r",
									"});\r",
									"\r",
									"var places = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Validate that place is in database\", function (){\r",
									"\tpm.expect(places.length).to.be.equal(1);\r",
									"\tpm.expect(places[0].name).to.be.equal(\"LaFayette Park\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places?page=1&limit=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1aec3d9-0ad6-4af2-ac5b-164be6f26e50",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5f22400-e6a0-46ab-a9ae-cbf552d1b9da",
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var expectedPlace = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected place name to testPlace name\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").name).to.equal(expectedPlace.name);\r",
									"});\r",
									"pm.test(\"Compare expected place id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").id).to.equal(expectedPlace.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace a place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c179fc4d-c83e-4022-8b91-e2d9db39be9b",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1eff4d9c-8b9b-474c-833c-99b6c4ca58be",
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").name).to.not.equal(pm.response.json().name);\r",
									"    pm.expect(pm.variables.get(\"testPlace\").address).to.not.equal(pm.response.json().address);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\":\"Academy Park\",\r\n      \"address\":{\r\n         \"city\":\"Albany\",\r\n         \"road\":\"Eagle Street\",\r\n         \"state\":\"New York\",\r\n         \"county\":\"Albany County\",\r\n         \"country\":\"United States of America\",\r\n         \"postcode\":\"12207\",\r\n         \"country_code\":\"us\",\r\n         \"neighbourhood\":\"Downtown\"\r\n      },\r\n      \"wikipedia\":\"https://ce.wikipedia.org/wiki/%3AAcademy%20Park%20%28parke%20sa%20Tinipong%20Bansa%2C%20New%20York%29\",\r\n      \"image\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/USA_location_map.svg/400px-USA_location_map.svg.png\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"ceb:Academy Park (parke sa Tinipong Bansa, New York)\",\r\n         \"text\":\"Parke ang Academy Park sa Tinipong Bansa. Ang Academy Park nahimutang sa kondado sa Albany County ug estado sa New York, sa sidlakang bahin sa nasod, 500 km sa amihanan-sidlakan sa ulohang dakbayan Washington, D.C. 45 metros ibabaw sa dagat kahaboga ang nahimutangan sa Academy Park.\",\r\n         \"html\":\"<p>Parke ang <b>Academy Park</b> sa Tinipong Bansa. Ang Academy Park nahimutang sa kondado sa Albany County ug estado sa New York, sa sidlakang bahin sa nasod, 500 km sa amihanan-sidlakan sa ulohang dakbayan Washington, D.C. 45 metros ibabaw sa dagat kahaboga ang nahimutangan sa Academy Park.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":-73.754883,\r\n         \"lat\":42.652645\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6cbe07f1-ab0c-473e-a627-024c622dd7a5",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "222008f4-9e1f-40de-a580-d145e4a37993",
								"exec": [
									"pm.test(\"Successful PATCH request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate same ID\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\")._id).to.equal(pm.response.json()._id);\r",
									"});\r",
									"pm.test(\"Validate different values in object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").name).to.not.equal(pm.response.json().name);\r",
									"    pm.expect(pm.variables.get(\"testPlace\").address).to.not.equal(pm.response.json().address);\r",
									"});\r",
									"pm.test(\"Validate same values in unchanged object fields\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").wikipedia_extracts.title).to.equal(pm.response.json().wikipedia_extracts.title);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\":\"Academy Test Park\",\r\n      \"address\":{\r\n         \"city\":\"Test\",\r\n         \"road\":\"Test\",\r\n         \"state\":\"Test York\",\r\n         \"county\":\"Test County\",\r\n         \"country\":\"Test States of America\",\r\n         \"postcode\":\"1234556\",\r\n         \"country_code\":\"Test\",\r\n         \"neighbourhood\":\"Test\"\r\n      },\r\n      \"wikipedia\":\"https://ce.wikipedia.org/wiki/%3AAcademy%20Park%20%28parke%20sa%20Tinipong%20Bansa%2C%20New%20York%29\",\r\n      \"image\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/USA_location_map.svg/400px-USA_location_map.svg.png\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"ceb:Academy Park (parke sa Tinipong Bansa, New York)\",\r\n         \"text\":\"Parke ang Academy Park sa Tinipong Bansa. Ang Academy Park nahimutang sa kondado sa Albany County ug estado sa New York, sa sidlakang bahin sa nasod, 500 km sa amihanan-sidlakan sa ulohang dakbayan Washington, D.C. 45 metros ibabaw sa dagat kahaboga ang nahimutangan sa Academy Park.\",\r\n         \"html\":\"<p>Parke ang <b>Academy Park</b> sa Tinipong Bansa. Ang Academy Park nahimutang sa kondado sa Albany County ug estado sa New York, sa sidlakang bahin sa nasod, 500 km sa amihanan-sidlakan sa ulohang dakbayan Washington, D.C. 45 metros ibabaw sa dagat kahaboga ang nahimutangan sa Academy Park.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":-73.754883,\r\n         \"lat\":42.652645\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a place by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c6d4817-1264-4f0f-8726-a616e44a733c",
								"exec": [
									"pm.variables.set(\"placeId\", pm.variables.get(\"testPlace\")._id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c5d6c22-3841-43b9-87fa-394e41366753",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var place = pm.response.json();\r",
									"pm.test(\"Compare expected id to testPlace id\", function (){\r",
									"    pm.expect(pm.variables.get(\"testPlace\").id).to.equal(place.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/places/{{placeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places",
								"{{placeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create place object 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6ae2f5ba-0147-4232-a77a-d67f48d86619",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c87b74a2-402c-43d6-a29f-5ee8a9bf35e4",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									"pm.environment.set(\"placeId\", pm.response.json()._id);\r",
									"\r",
									"var placeName = \"LaFayette Park\";\r",
									"var testPlace = pm.variables.get(\"testPlace\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testPlace.name).to.equal(placeName);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n      \"name\":\"LaFayette Park\",\r\n      \"address\":{\r\n         \"city\":\"Albany\",\r\n         \"road\":\"Elk Street\",\r\n         \"state\":\"New York\",\r\n         \"county\":\"Albany County\",\r\n         \"country\":\"United States of America\",\r\n         \"postcode\":\"12207\",\r\n         \"country_code\":\"us\",\r\n         \"house_number\":\"33\",\r\n         \"neighbourhood\":\"Sheridan Hollow\"\r\n      },\r\n      \"wikipedia\":\"https://en.wikipedia.org/wiki/Lafayette%20Park%20Historic%20District\",\r\n      \"image\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Elk_Street_Albany.jpg/400px-Elk_Street_Albany.jpg\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"en:Lafayette Park Historic District\",\r\n         \"text\":\"The Lafayette Park Historic District is located in central Albany, New York, United States. It includes the park and the combination of large government buildings and small rowhouses on the neighboring streets. In 1978 it was recognized as a historic district and listed on the National Register of Historic Places (NRHP). Many of its contributing properties are themselves listed on the National Register. One of them, the New York State Capitol, is a National Historic Landmark as well. City hall and the building housing Albany County government, along with the state's highest court and the offices of its Education Department. The Episcopal Diocese of Albany also has its cathedral within the district.\",\r\n         \"html\":\"<p>The <b>Lafayette Park Historic District</b> is located in central Albany, New York, United States. It includes the park and the combination of large government buildings and small rowhouses on the neighboring streets. In 1978 it was recognized as a historic district and listed on the National Register of Historic Places (NRHP). Many of its contributing properties are themselves listed on the National Register. One of them, the New York State Capitol, is a National Historic Landmark as well. City hall and the building housing Albany County government, along with the state's highest court and the offices of its Education Department. The Episcopal Diocese of Albany also has its cathedral within the district.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":-73.755806,\r\n         \"lat\":42.653233\r\n      }\r\n   }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create place object 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "09d4af56-52db-4cc3-9612-00d67548a94d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74371382-597c-4616-a28e-484a116eb00d",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"testPlace\", pm.response.json());\r",
									"pm.environment.set(\"placeId\", pm.response.json()._id);\r",
									"\r",
									"var placeName = \"Academy Park\";\r",
									"var testPlace = pm.variables.get(\"testPlace\");\r",
									"\r",
									"pm.test(\"Successful name validation\", function(){\r",
									"    pm.expect(testPlace.name).to.equal(placeName);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\":\"Academy Park\",\r\n      \"address\":{\r\n         \"city\":\"Albany\",\r\n         \"road\":\"Eagle Street\",\r\n         \"state\":\"New York\",\r\n         \"county\":\"Albany County\",\r\n         \"country\":\"United States of America\",\r\n         \"postcode\":\"12207\",\r\n         \"country_code\":\"us\",\r\n         \"neighbourhood\":\"Downtown\"\r\n      },\r\n      \"wikipedia\":\"https://ce.wikipedia.org/wiki/%3AAcademy%20Park%20%28parke%20sa%20Tinipong%20Bansa%2C%20New%20York%29\",\r\n      \"image\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/USA_location_map.svg/400px-USA_location_map.svg.png\",\r\n      \"wikipedia_extracts\":{\r\n         \"title\":\"ceb:Academy Park (parke sa Tinipong Bansa, New York)\",\r\n         \"text\":\"Parke ang Academy Park sa Tinipong Bansa. Ang Academy Park nahimutang sa kondado sa Albany County ug estado sa New York, sa sidlakang bahin sa nasod, 500 km sa amihanan-sidlakan sa ulohang dakbayan Washington, D.C. 45 metros ibabaw sa dagat kahaboga ang nahimutangan sa Academy Park.\",\r\n         \"html\":\"<p>Parke ang <b>Academy Park</b> sa Tinipong Bansa. Ang Academy Park nahimutang sa kondado sa Albany County ug estado sa New York, sa sidlakang bahin sa nasod, 500 km sa amihanan-sidlakan sa ulohang dakbayan Washington, D.C. 45 metros ibabaw sa dagat kahaboga ang nahimutangan sa Academy Park.</p>\"\r\n      },\r\n      \"point\":{\r\n         \"lon\":-73.754883,\r\n         \"lat\":42.652645\r\n      }\r\n   }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all places in database",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "532c9f31-66e6-46c7-a68d-268571a9f546",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a785805-0999-482c-bca2-61277b4c4ec7",
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check deleted places count\", function () {\r",
									"\tpm.expect(pm.response.json().deletedCount).to.equal(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/places",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"places"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9826b3ef-61a1-478c-8d7e-febf3b464a75",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0f3c4f7f-04bc-411b-83e8-6a2c958776a4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f9302e00-d270-402e-8070-596dd1dd0399",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "576e7d03-d643-4791-802e-4108442ff9a2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}